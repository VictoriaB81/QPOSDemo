{"name": "test_loginInvalidPassword", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <AppiumFramework.pages.LoginPage.LoginPageTest object at 0x043656D0>, locatorValue = 'com.quinta.qpos:id/editTextUserName', locatorType = 'id'\n\n    def getElement(self, locatorValue, locatorType=\"id\"):\n        element = None\n        try:\n            locatorType = locatorType.lower()\n>           element = self.waitForElement(locatorValue, locatorType)\n\n..\\base\\BasePage.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AppiumFramework.pages.LoginPage.LoginPageTest object at 0x043656D0>, locatorvalue = 'com.quinta.qpos:id/editTextUserName', locatorType = 'id'\n\n    def waitForElement(self, locatorvalue, locatorType):\n        locatorType = locatorType.lower()\n        element = None\n        wait = WebDriverWait(self.driver, 25, poll_frequency=1,\n                             ignored_exceptions=[ElementNotVisibleException, ElementNotSelectableException,\n                                                 NoSuchElementException])\n        if locatorType == \"id\":\n>           element = wait.until(lambda x: x.find_element_by_id(locatorvalue))\n\n..\\base\\BasePage.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"691d0e4a-5eab-465c-af46-ada9abc3c10f\")>\nmethod = <function BasePage.waitForElement.<locals>.<lambda> at 0x041297C8>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nc:\\users\\victoria baretto\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <AppiumFramework.pages.LoginPage.LoginPageTest object at 0x043656D0>, text = 'admin90', locatorValue = 'com.quinta.qpos:id/editTextUserName'\nlocatorType = 'id'\n\n    def sendText(self, text, locatorValue, locatorType=\"id\"):\n        element = None\n        try:\n            locatorType = locatorType.lower()\n>           element = self.getElement(locatorValue, locatorType)\n\n..\\base\\BasePage.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AppiumFramework.pages.LoginPage.LoginPageTest object at 0x043656D0>, locatorValue = 'com.quinta.qpos:id/editTextUserName', locatorType = 'id'\n\n    def getElement(self, locatorValue, locatorType=\"id\"):\n        element = None\n        try:\n            locatorType = locatorType.lower()\n            element = self.waitForElement(locatorValue, locatorType)\n            self.log.info(\"Element found with LocatorType: \" + locatorType + \" with the locatorValue :\" + locatorValue)\n        except:\n            self.log.info(\n                \"Element not found with LocatorType: \" + locatorType + \" and with the locatorValue :\" + locatorValue)\n            self.takeScreenshot(locatorType)\n>           assert False\nE           AssertionError\n\n..\\base\\BasePage.py:56: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <AppiumFramework.tests.LoginPageTest.LoginTest testMethod=test_loginInvalidPassword>\n\n    @pytest.mark.run(order=2)\n    def test_loginInvalidPassword(self):\n        cl.allureLogs(\"App Opened\")\n        # self.cf.clickAllowBtn1()\n        # self.cf.clickAllowBtn2()\n        # self.cf.enterLicenseKey()\n        # self.driver.hide_keyboard()\n        # self.cf.LicenseSubmitBtn()\n        # self.gt.verifyLoginScreen()\n        self.bp.keyCode(4)\n>       self.gt.enterUsername()\n\nLoginPageTest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\pages\\LoginPage.py:28: in enterUsername\n    self.sendText(\"admin90\", self._username, \"id\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AppiumFramework.pages.LoginPage.LoginPageTest object at 0x043656D0>, text = 'admin90', locatorValue = 'com.quinta.qpos:id/editTextUserName'\nlocatorType = 'id'\n\n    def sendText(self, text, locatorValue, locatorType=\"id\"):\n        element = None\n        try:\n            locatorType = locatorType.lower()\n            element = self.getElement(locatorValue, locatorType)\n            element.send_keys(text)\n            self.log.info(\n                \"Send text  on Element with LocatorType: \" + locatorType + \" and with the locatorValue :\" + locatorValue)\n        except:\n            self.log.info(\n                \"Unable to send text on Element with LocatorType: \" + locatorType + \" and with the locatorValue :\" + locatorValue)\n            self.takeScreenshot(locatorType)\n>           assert False\nE           AssertionError\n\n..\\base\\BasePage.py:86: AssertionError"}, "steps": [{"name": "App Opened", "status": "passed", "start": 1599831003069, "stop": 1599831003069}], "attachments": [{"name": "id", "source": "32f50cdf-fa98-49df-a1a7-35badb84120f-attachment.png", "type": "image/png"}, {"name": "id", "source": "73dcbac2-6d93-4473-a0e6-06ef1de43d2b-attachment.png", "type": "image/png"}, {"name": "log", "source": "e42611b8-d3ce-422b-8d79-c26f0391dc1f-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "4e728070-8804-4c17-b189-06d5ea66c532-attachment.txt", "type": "text/plain"}], "start": 1599831003069, "stop": 1599831030036, "uuid": "50bf1c7e-81d7-47da-928b-70dffaee8b0d", "historyId": "b84123138967d2bae41043b3d0fe183c", "testCaseId": "8c2b39a9c4e1e0baa83afd04dd9b24cc", "fullName": "LoginPageTest.LoginTest#test_loginInvalidPassword", "labels": [{"name": "suite", "value": "LoginPageTest"}, {"name": "subSuite", "value": "LoginTest"}, {"name": "host", "value": "LP-00DBDF5DBA60"}, {"name": "thread", "value": "9932-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "LoginPageTest"}]}