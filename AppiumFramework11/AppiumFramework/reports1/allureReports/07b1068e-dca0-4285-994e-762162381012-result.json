{"name": "test_PrintBills", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <AppiumFramework.pages.PosBillPage.PosBillPgTest object at 0x04B6B490>, locatorValue = 'com.quinta.qpos:id/textViewPrint'\nlocatorType = 'xpath'\n\n    def getElement(self, locatorValue, locatorType=\"id\"):\n        element = None\n        try:\n            locatorType = locatorType.lower()\n>           element = self.waitForElement(locatorValue, locatorType)\n\n..\\base\\BasePage.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AppiumFramework.pages.PosBillPage.PosBillPgTest object at 0x04B6B490>, locatorvalue = 'com.quinta.qpos:id/textViewPrint'\nlocatorType = 'xpath'\n\n    def waitForElement(self, locatorvalue, locatorType):\n        locatorType = locatorType.lower()\n        element = None\n        wait = WebDriverWait(self.driver, 25, poll_frequency=1,\n                             ignored_exceptions=[ElementNotVisibleException, ElementNotSelectableException,\n                                                 NoSuchElementException])\n        if locatorType == \"id\":\n            element = wait.until(lambda x: x.find_element_by_id(locatorvalue))\n            return element\n        elif locatorType == \"class\":\n            element = wait.until(lambda x: x.find_element_by_class_name(locatorvalue))\n            return element\n        elif locatorType == \"des\":\n            element = wait.until(\n                lambda x: x.find_element_by_android_uiautomator('UiSelector().description(\"%s\")' % (locatorvalue)))\n            return element\n        elif locatorType == \"index\":\n            element = wait.until(\n                lambda x: x.find_element_by_android_uiautomator(\"UiSelector().index(%d)\" % int(locatorvalue)))\n            return element\n        elif locatorType == \"text\":\n            element = wait.until(lambda x: x.find_element_by_android_uiautomator('text(\"%s\")' % locatorvalue))\n            return element\n        elif locatorType == \"xpath\":\n>           element = wait.until(lambda x: x.find_element_by_xpath('%s' % (locatorvalue)))\n\n..\\base\\BasePage.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"1e455114-c774-49c5-a842-1cd7f2cb01af\")>\nmethod = <function BasePage.waitForElement.<locals>.<lambda> at 0x04B77108>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n>               value = method(self._driver)\n\nc:\\users\\victoria baretto\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nx = <appium.webdriver.webdriver.WebDriver (session=\"1e455114-c774-49c5-a842-1cd7f2cb01af\")>\n\n>   element = wait.until(lambda x: x.find_element_by_xpath('%s' % (locatorvalue)))\n\n..\\base\\BasePage.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.webdriver.WebDriver (session=\"1e455114-c774-49c5-a842-1cd7f2cb01af\")>, xpath = 'com.quinta.qpos:id/textViewPrint'\n\n    def find_element_by_xpath(self, xpath):\n        \"\"\"\n        Finds an element by xpath.\n    \n        :Args:\n         - xpath - The xpath locator of the element to find.\n    \n        :Returns:\n         - WebElement - the element if it was found\n    \n        :Raises:\n         - NoSuchElementException - if the element wasn't found\n    \n        :Usage:\n            element = driver.find_element_by_xpath('//div/td[1]')\n        \"\"\"\n>       return self.find_element(by=By.XPATH, value=xpath)\n\nc:\\users\\victoria baretto\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:394: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.webdriver.WebDriver (session=\"1e455114-c774-49c5-a842-1cd7f2cb01af\")>, by = 'xpath'\nvalue = 'com.quinta.qpos:id/textViewPrint'\n\n    def find_element(self, by=By.ID, value=None):\n        \"\"\"'Private' method used by the find_element_by_* methods.\n    \n        Override for Appium\n    \n        Usage:\n            Use the corresponding find_element_by_* instead of this.\n    \n        Returns:\n            `appium.webdriver.webelement.WebElement`\n    \n        :rtype: `MobileWebElement`\n        \"\"\"\n        # TODO: If we need, we should enable below converter for Web context\n        # if self.w3c:\n        #     if by == By.ID:\n        #         by = By.CSS_SELECTOR\n        #         value = '[id=\"%s\"]' % value\n        #     elif by == By.TAG_NAME:\n        #         by = By.CSS_SELECTOR\n        #     elif by == By.CLASS_NAME:\n        #         by = By.CSS_SELECTOR\n        #         value = \".%s\" % value\n        #     elif by == By.NAME:\n        #         by = By.CSS_SELECTOR\n        #         value = '[name=\"%s\"]' % value\n    \n        return self.execute(RemoteCommand.FIND_ELEMENT, {\n            'using': by,\n>           'value': value})['value']\n\nc:\\users\\victoria baretto\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\appium\\webdriver\\webdriver.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.webdriver.WebDriver (session=\"1e455114-c774-49c5-a842-1cd7f2cb01af\")>, driver_command = 'findElement'\nparams = {'using': 'xpath', 'value': 'com.quinta.qpos:id/textViewPrint'}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nc:\\users\\victoria baretto\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x04B6B350>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"An unknown server-side error occurred while pro....uiautomator2.core.AccessibilityNodeInfoDumper.findNodes(AccessibilityNodeInfoDumper.java:218)\\\\n\\\\t... 33 more\\\\n\"}}'}\n\n    def check_response(self, response):\n        try:\n            super(MobileErrorHandler, self).check_response(response)\n        except WebDriverException as wde:\n            if wde.msg == 'No such context found.':\n                raise NoSuchContextException(wde.msg, wde.screen, wde.stacktrace)\n            else:\n>               raise wde\n\nc:\\users\\victoria baretto\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x04B6B350>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"An unknown server-side error occurred while pro....uiautomator2.core.AccessibilityNodeInfoDumper.findNodes(AccessibilityNodeInfoDumper.java:218)\\\\n\\\\t... 33 more\\\\n\"}}'}\n\n    def check_response(self, response):\n        try:\n>           super(MobileErrorHandler, self).check_response(response)\n\nc:\\users\\victoria baretto\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x04B6B350>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"An unknown server-side error occurred while pro....uiautomator2.core.AccessibilityNodeInfoDumper.findNodes(AccessibilityNodeInfoDumper.java:218)\\\\n\\\\t... 33 more\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: java.lang.IllegalArgumentException: Namespace with prefix 'com.quinta.qpos' has not been declared.\n\nc:\\users\\victoria baretto\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: WebDriverException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <AppiumFramework.pages.PosBillPage.PosBillPgTest object at 0x04B6B490>, locatorValue = 'com.quinta.qpos:id/textViewPrint'\nlocatorType = 'xpath'\n\n    def clickElement(self, locatorValue, locatorType=\"id\"):\n        element = None\n        try:\n            locatorType = locatorType.lower()\n>           element = self.getElement(locatorValue, locatorType)\n\n..\\base\\BasePage.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AppiumFramework.pages.PosBillPage.PosBillPgTest object at 0x04B6B490>, locatorValue = 'com.quinta.qpos:id/textViewPrint'\nlocatorType = 'xpath'\n\n    def getElement(self, locatorValue, locatorType=\"id\"):\n        element = None\n        try:\n            locatorType = locatorType.lower()\n            element = self.waitForElement(locatorValue, locatorType)\n            self.log.info(\"Element found with LocatorType: \" + locatorType + \" with the locatorValue :\" + locatorValue)\n        except:\n            self.log.info(\n                \"Element not found with LocatorType: \" + locatorType + \" and with the locatorValue :\" + locatorValue)\n            self.takeScreenshot(locatorType)\n>           assert False\nE           AssertionError\n\n..\\base\\BasePage.py:56: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <AppiumFramework.tests.PosBillPageTest.PosBillPageTest testMethod=test_PrintBills>\n\n    @pytest.mark.run(order=6)\n    def test_PrintBills(self):\n        cl.allureLogs(\"App Opened\")\n        self.cf.clickAllowBtn1()\n        self.cf.clickAllowBtn2()\n        self.cf.enterLicenseKey()\n        self.driver.hide_keyboard()\n        self.cf.LicenseSubmitBtn()\n        self.gt.verifyLoginScreen()\n        self.gt.enterUsername()\n        self.gt.enterPassword()\n        self.gt.clickLoginSubmitBtn()\n        self.ip.enterInitialCash()\n        self.ip.clickICSubmitBtn()\n        self.ph.clickOnPOS()\n        self.ps.clickOnitem1()\n        self.ps.clickOnitem2()\n        self.ps.clickOnTotalAmount()\n>       self.pb.clickOnPrintBill()\n\nPosBillPageTest.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\pages\\PosBillPage.py:15: in clickOnPrintBill\n    self.clickElement(self._printBillBtn, \"xpath\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AppiumFramework.pages.PosBillPage.PosBillPgTest object at 0x04B6B490>, locatorValue = 'com.quinta.qpos:id/textViewPrint'\nlocatorType = 'xpath'\n\n    def clickElement(self, locatorValue, locatorType=\"id\"):\n        element = None\n        try:\n            locatorType = locatorType.lower()\n            element = self.getElement(locatorValue, locatorType)\n            element.click()\n            self.log.info(\n                \"Clicked on Element with LocatorType: \" + locatorType + \" and with the locatorValue :\" + locatorValue)\n        except:\n            self.log.info(\n                \"Unable to click on Element with LocatorType: \" + locatorType + \" and with the locatorValue :\" + locatorValue)\n            self.takeScreenshot(locatorType)\n>           assert False\nE           AssertionError\n\n..\\base\\BasePage.py:72: AssertionError"}, "steps": [{"name": "App Opened", "status": "passed", "start": 1599734965910, "stop": 1599734965910}, {"name": "Clicked on allow button 1", "status": "passed", "start": 1599734966333, "stop": 1599734966333}, {"name": "Clicked on allow button 1", "status": "passed", "start": 1599734967550, "stop": 1599734967550}, {"name": "Entered License Key", "status": "passed", "start": 1599734970027, "stop": 1599734970027}, {"name": "Submitted License Key", "status": "passed", "start": 1599734974696, "stop": 1599734974696}, {"name": "Opened login Screen", "status": "passed", "start": 1599734989985, "stop": 1599734989985}, {"name": "Entered username", "status": "passed", "start": 1599734990962, "stop": 1599734990962}, {"name": "Entered password", "status": "passed", "start": 1599734992238, "stop": 1599734992238}, {"name": "Click on Login Button", "status": "passed", "start": 1599734992759, "stop": 1599734992759}, {"name": "Entered initial cash", "status": "passed", "start": 1599734994899, "stop": 1599734994899}, {"name": "Click on Initial cash submit Button", "status": "passed", "start": 1599734995429, "stop": 1599734995429}, {"name": "Clicked on POS", "status": "passed", "start": 1599734996612, "stop": 1599734996612}, {"name": "Clicked on item1", "status": "passed", "start": 1599735000775, "stop": 1599735000775}, {"name": "Clicked on item2", "status": "passed", "start": 1599735001583, "stop": 1599735001583}, {"name": "Clicked on totalAmount", "status": "passed", "start": 1599735002367, "stop": 1599735002367}], "attachments": [{"name": "xpath", "source": "688cf0e4-d0f0-44be-9ad4-f07811221925-attachment.png", "type": "image/png"}, {"name": "xpath", "source": "6ed25b4e-693c-462b-9cf6-405dbbb03af0-attachment.png", "type": "image/png"}, {"name": "log", "source": "2e2fb5e1-366a-4a0f-bfc9-ee3f08cb69bd-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "20df5b7a-1bb4-42d8-8ea4-c22d5597a5b2-attachment.txt", "type": "text/plain"}], "start": 1599734965910, "stop": 1599735003967, "uuid": "6f328309-2524-41c2-9037-4985750cdc61", "historyId": "fb2d686a81d652d7426de5f0a6d0a8b6", "testCaseId": "ef94c40aa1653e47fa5f61bf7ab71217", "fullName": "PosBillPageTest.PosBillPageTest#test_PrintBills", "labels": [{"name": "suite", "value": "PosBillPageTest"}, {"name": "subSuite", "value": "PosBillPageTest"}, {"name": "host", "value": "LP-00DBDF5DBA60"}, {"name": "thread", "value": "21908-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "PosBillPageTest"}]}