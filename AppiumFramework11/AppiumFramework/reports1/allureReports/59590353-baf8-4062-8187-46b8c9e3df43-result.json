{"name": "test_openLoginScreen", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <AppiumFramework.pages.InstallationPage.AppLaunchPermission object at 0x03DF3170>\nlocatorValue = 'com.android.packageinstaller:id/permission_allow_button', locatorType = 'id'\n\n    def getElement(self, locatorValue, locatorType=\"id\"):\n        element = None\n        try:\n            locatorType = locatorType.lower()\n>           element = self.waitForElement(locatorValue, locatorType)\n\n..\\base\\BasePage.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AppiumFramework.pages.InstallationPage.AppLaunchPermission object at 0x03DF3170>\nlocatorvalue = 'com.android.packageinstaller:id/permission_allow_button', locatorType = 'id'\n\n    def waitForElement(self, locatorvalue, locatorType):\n        locatorType = locatorType.lower()\n        element = None\n        wait = WebDriverWait(self.driver, 25, poll_frequency=1,\n                             ignored_exceptions=[ElementNotVisibleException, ElementNotSelectableException,\n                                                 NoSuchElementException])\n        if locatorType == \"id\":\n>           element = wait.until(lambda x: x.find_element_by_id(locatorvalue))\n\n..\\base\\BasePage.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"7ad02276-a2f5-454d-b4f5-5470993cd722\")>\nmethod = <function BasePage.waitForElement.<locals>.<lambda> at 0x03E14FA8>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nc:\\users\\victoria baretto\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <AppiumFramework.pages.InstallationPage.AppLaunchPermission object at 0x03DF3170>\nlocatorValue = 'com.android.packageinstaller:id/permission_allow_button', locatorType = 'id'\n\n    def clickElement(self, locatorValue, locatorType=\"id\"):\n        element = None\n        try:\n            locatorType = locatorType.lower()\n>           element = self.getElement(locatorValue, locatorType)\n\n..\\base\\BasePage.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AppiumFramework.pages.InstallationPage.AppLaunchPermission object at 0x03DF3170>\nlocatorValue = 'com.android.packageinstaller:id/permission_allow_button', locatorType = 'id'\n\n    def getElement(self, locatorValue, locatorType=\"id\"):\n        element = None\n        try:\n            locatorType = locatorType.lower()\n            element = self.waitForElement(locatorValue, locatorType)\n            self.log.info(\"Element found with LocatorType: \" + locatorType + \" with the locatorValue :\" + locatorValue)\n        except:\n            self.log.info(\n                \"Element not found with LocatorType: \" + locatorType + \" and with the locatorValue :\" + locatorValue)\n            self.takeScreenshot(locatorType)\n>           assert False\nE           AssertionError\n\n..\\base\\BasePage.py:56: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <AppiumFramework.tests.LoginPageTest.LoginTest testMethod=test_openLoginScreen>\n\n    @pytest.mark.run(order=1)\n    def test_openLoginScreen(self):\n        cl.allureLogs(\"App Opened\")\n>       self.cf.clickAllowBtn1()\n\nLoginPageTest.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\pages\\InstallationPage.py:15: in clickAllowBtn1\n    self.clickElement(self._allowBtn1, \"id\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AppiumFramework.pages.InstallationPage.AppLaunchPermission object at 0x03DF3170>\nlocatorValue = 'com.android.packageinstaller:id/permission_allow_button', locatorType = 'id'\n\n    def clickElement(self, locatorValue, locatorType=\"id\"):\n        element = None\n        try:\n            locatorType = locatorType.lower()\n            element = self.getElement(locatorValue, locatorType)\n            element.click()\n            self.log.info(\n                \"Clicked on Element with LocatorType: \" + locatorType + \" and with the locatorValue :\" + locatorValue)\n        except:\n            self.log.info(\n                \"Unable to click on Element with LocatorType: \" + locatorType + \" and with the locatorValue :\" + locatorValue)\n            self.takeScreenshot(locatorType)\n>           assert False\nE           AssertionError\n\n..\\base\\BasePage.py:72: AssertionError"}, "steps": [{"name": "App Opened", "status": "passed", "start": 1599738769209, "stop": 1599738769209}], "attachments": [{"name": "id", "source": "6b1cc3a5-e7a4-4459-9ae8-8a1408cab693-attachment.png", "type": "image/png"}, {"name": "id", "source": "9f721236-0fff-4654-ac37-465436fad4ad-attachment.png", "type": "image/png"}, {"name": "log", "source": "00bc01a1-5e70-4c8d-9e2c-112da8beeec9-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "b5b9c583-f7ea-4e35-9d0c-81f1112e4e8b-attachment.txt", "type": "text/plain"}], "start": 1599738769209, "stop": 1599738795298, "uuid": "4c542b0e-bb93-433d-afc9-6391d7abfbd8", "historyId": "373a6499f1795ced3241f6c6c1fd2cfc", "testCaseId": "20d6ddd3911ea04726a1f0f6d06584a8", "fullName": "LoginPageTest.LoginTest#test_openLoginScreen", "labels": [{"name": "suite", "value": "LoginPageTest"}, {"name": "subSuite", "value": "LoginTest"}, {"name": "host", "value": "LP-00DBDF5DBA60"}, {"name": "thread", "value": "21532-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "LoginPageTest"}]}