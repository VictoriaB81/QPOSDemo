{"name": "test_loginFailMethod", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <AppiumFramework.pages.InstallationPage.AppLaunchPermission object at 0x04E34CB0>\nlocatorValue = 'com.android.packageinstaller:id/permission_allow_button', locatorType = 'id'\n\n    def getElement(self, locatorValue, locatorType=\"id\"):\n        element = None\n        try:\n            locatorType = locatorType.lower()\n>           element = self.waitForElement(locatorValue, locatorType)\n\n..\\base\\BasePage.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AppiumFramework.pages.InstallationPage.AppLaunchPermission object at 0x04E34CB0>\nlocatorvalue = 'com.android.packageinstaller:id/permission_allow_button', locatorType = 'id'\n\n    def waitForElement(self, locatorvalue, locatorType):\n        locatorType = locatorType.lower()\n        element = None\n        wait = WebDriverWait(self.driver, 25, poll_frequency=1,\n                             ignored_exceptions=[ElementNotVisibleException, ElementNotSelectableException,\n                                                 NoSuchElementException])\n        if locatorType == \"id\":\n>           element = wait.until(lambda x: x.find_element_by_id(locatorvalue))\n\n..\\base\\BasePage.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"230bcb3e-0ceb-4150-b6e4-9af424869f3f\")>\nmethod = <function BasePage.waitForElement.<locals>.<lambda> at 0x04E3B810>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nc:\\users\\victoria baretto\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <AppiumFramework.pages.InstallationPage.AppLaunchPermission object at 0x04E34CB0>\nlocatorValue = 'com.android.packageinstaller:id/permission_allow_button', locatorType = 'id'\n\n    def clickElement(self, locatorValue, locatorType=\"id\"):\n        element = None\n        try:\n            locatorType = locatorType.lower()\n>           element = self.getElement(locatorValue, locatorType)\n\n..\\base\\BasePage.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AppiumFramework.pages.InstallationPage.AppLaunchPermission object at 0x04E34CB0>\nlocatorValue = 'com.android.packageinstaller:id/permission_allow_button', locatorType = 'id'\n\n    def getElement(self, locatorValue, locatorType=\"id\"):\n        element = None\n        try:\n            locatorType = locatorType.lower()\n            element = self.waitForElement(locatorValue, locatorType)\n            self.log.info(\"Element found with LocatorType: \" + locatorType + \" with the locatorValue :\" + locatorValue)\n        except:\n            self.log.info(\n                \"Element not found with LocatorType: \" + locatorType + \" and with the locatorValue :\" + locatorValue)\n            self.takeScreenshot(locatorType)\n>           assert False\nE           AssertionError\n\n..\\base\\BasePage.py:56: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <AppiumFramework.tests.PosBillPageTest.PosBillPageTest testMethod=test_loginFailMethod>\n\n    @pytest.mark.run(order=1)\n    def test_loginFailMethod(self):\n        cl.allureLogs(\"App Opened\")\n>       self.cf.clickAllowBtn1()\n\nPosBillPageTest.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\pages\\InstallationPage.py:15: in clickAllowBtn1\n    self.clickElement(self._allowBtn1, \"id\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AppiumFramework.pages.InstallationPage.AppLaunchPermission object at 0x04E34CB0>\nlocatorValue = 'com.android.packageinstaller:id/permission_allow_button', locatorType = 'id'\n\n    def clickElement(self, locatorValue, locatorType=\"id\"):\n        element = None\n        try:\n            locatorType = locatorType.lower()\n            element = self.getElement(locatorValue, locatorType)\n            element.click()\n            self.log.info(\n                \"Clicked on Element with LocatorType: \" + locatorType + \" and with the locatorValue :\" + locatorValue)\n        except:\n            self.log.info(\n                \"Unable to click on Element with LocatorType: \" + locatorType + \" and with the locatorValue :\" + locatorValue)\n            self.takeScreenshot(locatorType)\n>           assert False\nE           AssertionError\n\n..\\base\\BasePage.py:72: AssertionError"}, "steps": [{"name": "App Opened", "status": "passed", "start": 1599740520346, "stop": 1599740520346}], "attachments": [{"name": "id", "source": "0a666d1c-a513-4858-8276-1506cbb429b5-attachment.png", "type": "image/png"}, {"name": "id", "source": "573b09a0-1270-4068-9f39-9abec0ce8db5-attachment.png", "type": "image/png"}, {"name": "log", "source": "d85840d7-7c1f-4238-985c-6acdfc3b300a-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "f52313c4-e9b7-4b02-9d4e-2d67572cab67-attachment.txt", "type": "text/plain"}], "start": 1599740520346, "stop": 1599740546771, "uuid": "da4cdbf8-ccf2-48d7-886b-b27563f9200b", "historyId": "2f74c96d2b85d4f53db0a406e5922928", "testCaseId": "cc974250b881820fe7dcdc6cbee10414", "fullName": "TestSuite.PosBillPageTest#test_loginFailMethod", "labels": [{"name": "suite", "value": "TestSuite"}, {"name": "subSuite", "value": "PosBillPageTest"}, {"name": "host", "value": "LP-00DBDF5DBA60"}, {"name": "thread", "value": "2620-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestSuite"}]}